/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX 100

typedef struct {
	u_int vectores_len;
	int *vectores_val;
} vectores;

typedef struct operacion_arit operacion;

typedef struct operacion_trig operacion_t;

typedef struct ecuacion operacion_e;

typedef struct operacion_vect operacion_v;

struct operacion_arit {
	int a;
	char op;
	int b;
};
typedef struct operacion_arit operacion_arit;

enum funciones_trigonometricas {
	SENO = 0,
	COSENO = 1,
	TANGENTE = 2,
	COTANGENTE = 3,
	SECANTE = 4,
	COSECANTE = 5,
	ARCOSENO = 6,
	ARCOCOSENO = 7,
	ARCOTANGENTE = 8,
};
typedef enum funciones_trigonometricas funciones_trigonometricas;

struct operacion_trig {
	funciones_trigonometricas func;
	double valor;
};
typedef struct operacion_trig operacion_trig;

struct ecuacion {
	int a;
	int b;
	int c;
};
typedef struct ecuacion ecuacion;

struct resultado {
	double positivo;
	double negativo;
};
typedef struct resultado resultado;

struct operacion_vect {
	vectores a;
	char op;
	vectores b;
	int tam;
};
typedef struct operacion_vect operacion_vect;

struct resultado_calculadora {
	int errnum;
	union {
		double resultado;
	} resultado_calculadora_u;
};
typedef struct resultado_calculadora resultado_calculadora;

struct resultado_calculadora_ecuaciones {
	int errnum;
	union {
		resultado res;
	} resultado_calculadora_ecuaciones_u;
};
typedef struct resultado_calculadora_ecuaciones resultado_calculadora_ecuaciones;

struct resultado_calculadora_vectores {
	int errnum;
	union {
		vectores resultado;
	} resultado_calculadora_vectores_u;
};
typedef struct resultado_calculadora_vectores resultado_calculadora_vectores;

#define CALCULADORA 0x20000001
#define ARITMETICAS 1

#if defined(__STDC__) || defined(__cplusplus)
#define OPERACION_ARITMETICA 1
extern  resultado_calculadora * operacion_aritmetica_1(operacion , CLIENT *);
extern  resultado_calculadora * operacion_aritmetica_1_svc(operacion , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define OPERACION_ARITMETICA 1
extern  resultado_calculadora * operacion_aritmetica_1();
extern  resultado_calculadora * operacion_aritmetica_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */
#define TRIGONOMETRICAS 2

#if defined(__STDC__) || defined(__cplusplus)
#define OPERACION_TRIGONOMETRICA 1
extern  resultado_calculadora * operacion_trigonometrica_2(operacion_t , CLIENT *);
extern  resultado_calculadora * operacion_trigonometrica_2_svc(operacion_t , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define OPERACION_TRIGONOMETRICA 1
extern  resultado_calculadora * operacion_trigonometrica_2();
extern  resultado_calculadora * operacion_trigonometrica_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */
#define ECUACIONES 3

#if defined(__STDC__) || defined(__cplusplus)
#define OPERACION_ECUACIONES 1
extern  resultado_calculadora_ecuaciones * operacion_ecuaciones_3(operacion_e , CLIENT *);
extern  resultado_calculadora_ecuaciones * operacion_ecuaciones_3_svc(operacion_e , struct svc_req *);
extern int calculadora_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define OPERACION_ECUACIONES 1
extern  resultado_calculadora_ecuaciones * operacion_ecuaciones_3();
extern  resultado_calculadora_ecuaciones * operacion_ecuaciones_3_svc();
extern int calculadora_3_freeresult ();
#endif /* K&R C */
#define VECTORES 4

#if defined(__STDC__) || defined(__cplusplus)
#define OPERACION_VECTORES 1
extern  resultado_calculadora_vectores * operacion_vectores_4(operacion_v , CLIENT *);
extern  resultado_calculadora_vectores * operacion_vectores_4_svc(operacion_v , struct svc_req *);
extern int calculadora_4_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define OPERACION_VECTORES 1
extern  resultado_calculadora_vectores * operacion_vectores_4();
extern  resultado_calculadora_vectores * operacion_vectores_4_svc();
extern int calculadora_4_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_vectores (XDR *, vectores*);
extern  bool_t xdr_operacion (XDR *, operacion*);
extern  bool_t xdr_operacion_t (XDR *, operacion_t*);
extern  bool_t xdr_operacion_e (XDR *, operacion_e*);
extern  bool_t xdr_operacion_v (XDR *, operacion_v*);
extern  bool_t xdr_operacion_arit (XDR *, operacion_arit*);
extern  bool_t xdr_funciones_trigonometricas (XDR *, funciones_trigonometricas*);
extern  bool_t xdr_operacion_trig (XDR *, operacion_trig*);
extern  bool_t xdr_ecuacion (XDR *, ecuacion*);
extern  bool_t xdr_resultado (XDR *, resultado*);
extern  bool_t xdr_operacion_vect (XDR *, operacion_vect*);
extern  bool_t xdr_resultado_calculadora (XDR *, resultado_calculadora*);
extern  bool_t xdr_resultado_calculadora_ecuaciones (XDR *, resultado_calculadora_ecuaciones*);
extern  bool_t xdr_resultado_calculadora_vectores (XDR *, resultado_calculadora_vectores*);

#else /* K&R C */
extern bool_t xdr_vectores ();
extern bool_t xdr_operacion ();
extern bool_t xdr_operacion_t ();
extern bool_t xdr_operacion_e ();
extern bool_t xdr_operacion_v ();
extern bool_t xdr_operacion_arit ();
extern bool_t xdr_funciones_trigonometricas ();
extern bool_t xdr_operacion_trig ();
extern bool_t xdr_ecuacion ();
extern bool_t xdr_resultado ();
extern bool_t xdr_operacion_vect ();
extern bool_t xdr_resultado_calculadora ();
extern bool_t xdr_resultado_calculadora_ecuaciones ();
extern bool_t xdr_resultado_calculadora_vectores ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
